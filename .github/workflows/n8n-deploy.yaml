name: '🗒️n8n terraform plan/apply'

on:
  workflow_dispatch:

env:
  TERRAFORM_VERSION: '1.5.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  TF_VAR_n8n_admin_password: ${{ secrets.TF_VAR_n8n_admin_password }}
  # Backend configuration
  TF_BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}
  TF_BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}
  TF_BACKEND_CONTAINER_NAME: ${{ secrets.TF_BACKEND_CONTAINER_NAME }}
  TF_BACKEND_ACCESS_KEY: ${{ secrets.TF_BACKEND_ACCESS_KEY }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Debug Environment Variables
        run: |
          echo "ARM_CLIENT_ID is set: $([[ -n "$ARM_CLIENT_ID" ]] && echo "✓" || echo "✗")"
          echo "ARM_CLIENT_SECRET is set: $([[ -n "$ARM_CLIENT_SECRET" ]] && echo "✓" || echo "✗")" 
          echo "ARM_SUBSCRIPTION_ID is set: $([[ -n "$ARM_SUBSCRIPTION_ID" ]] && echo "✓" || echo "✗")"
          echo "ARM_TENANT_ID is set: $([[ -n "$ARM_TENANT_ID" ]] && echo "✓" || echo "✗")"
          echo "TF_VAR_n8n_admin_password is set: $([[ -n "$TF_VAR_n8n_admin_password" ]] && echo "✓" || echo "✗")"

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP_NAME" \
            -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$TF_BACKEND_CONTAINER_NAME" \
            -backend-config="key=n8n/terraform.tfstate" \
            -backend-config="access_key=$TF_BACKEND_ACCESS_KEY"
      
      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 0 ]; then
            echo "Terraform plan succeeded - no changes needed"
            exit 0
          elif [ $exitcode -eq 2 ]; then
            echo "Terraform plan succeeded - changes detected"
            exit 0
          else
            echo "Terraform plan failed with exit code $exitcode"
            exit 1
          fi

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./terraform/tfplan

      - name: Create String Output
        id: tf-plan-string
        working-directory: ./terraform
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}          
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform-plan]

    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP_NAME" \
          -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$TF_BACKEND_CONTAINER_NAME" \
          -backend-config="key=n8n/terraform.tfstate" \
          -backend-config="access_key=$TF_BACKEND_ACCESS_KEY"

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: ./terraform
    
    # Terraform Apply
    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan