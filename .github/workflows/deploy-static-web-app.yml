name: 🔗 deploy angular app

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'terraform/static-web-app/**'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
    paths:
      - 'src/**'
      - 'terraform/static-web-app/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  ANGULAR_APP_PATH: './src/n8n-deployment-monitoring'
  TERRAFORM_PATH: './terraform/static-web-app'
  TERRAFORM_VERSION: '1.5.0'
  # Reuse existing service principal variables
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  # Backend configuration
  TF_BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}
  TF_BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}
  TF_BACKEND_CONTAINER_NAME: ${{ secrets.TF_BACKEND_CONTAINER_NAME }}
  TF_BACKEND_ACCESS_KEY: ${{ secrets.TF_BACKEND_ACCESS_KEY }}

jobs:
  setup-backend:
    runs-on: ubuntu-latest
    name: 'Setup Backend if Needed'
    outputs:
      backend-ready: ${{ steps.check-backend.outputs.ready }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if backend secrets are configured
      id: check-backend
      run: |
        if [ -n "${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}" ] && \
           [ -n "${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}" ] && \
           [ -n "${{ secrets.TF_BACKEND_CONTAINER_NAME }}" ] && \
           [ -n "${{ secrets.TF_BACKEND_ACCESS_KEY }}" ]; then
          echo "✅ All backend secrets are configured"
          echo "ready=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Backend secrets are not configured"
          echo "Missing secrets. Please run the 'Setup Terraform Backend' workflow first."
          echo "Required secrets:"
          echo "- TF_BACKEND_RESOURCE_GROUP_NAME: $([[ -n "${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}" ]] && echo "✓" || echo "✗")"
          echo "- TF_BACKEND_STORAGE_ACCOUNT_NAME: $([[ -n "${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}" ]] && echo "✓" || echo "✗")"
          echo "- TF_BACKEND_CONTAINER_NAME: $([[ -n "${{ secrets.TF_BACKEND_CONTAINER_NAME }}" ]] && echo "✓" || echo "✗")"
          echo "- TF_BACKEND_ACCESS_KEY: $([[ -n "${{ secrets.TF_BACKEND_ACCESS_KEY }}" ]] && echo "✓" || echo "✗")"
          exit 1
        fi

  terraform-plan-and-apply:
    needs: setup-backend
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: 'Terraform Infrastructure'
    outputs:
      static-web-app-name: ${{ steps.terraform-output.outputs.static_web_app_name }}
      deployment-token: ${{ steps.terraform-output.outputs.deployment_token }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Debug Environment Variables
      run: |
        echo "ARM_CLIENT_ID is set: $([[ -n "$ARM_CLIENT_ID" ]] && echo "✓" || echo "✗")"
        echo "ARM_CLIENT_SECRET is set: $([[ -n "$ARM_CLIENT_SECRET" ]] && echo "✓" || echo "✗")" 
        echo "ARM_SUBSCRIPTION_ID is set: $([[ -n "$ARM_SUBSCRIPTION_ID" ]] && echo "✓" || echo "✗")"
        echo "ARM_TENANT_ID is set: $([[ -n "$ARM_TENANT_ID" ]] && echo "✓" || echo "✗")"

    - name: Terraform Init
      working-directory: ${{ env.TERRAFORM_PATH }}
      run: |
        terraform init \
          -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP_NAME" \
          -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$TF_BACKEND_CONTAINER_NAME" \
          -backend-config="key=static-web-app/terraform.tfstate" \
          -backend-config="access_key=$TF_BACKEND_ACCESS_KEY"

    - name: Terraform Refresh (sync state with Azure)
      working-directory: ${{ env.TERRAFORM_PATH }}
      run: |
        echo "Refreshing Terraform state to match actual Azure resources..."
        terraform refresh -var="environment=demo"
      
    - name: Terraform Plan
      working-directory: ${{ env.TERRAFORM_PATH }}
      run: terraform plan -var="environment=demo" -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      working-directory: ${{ env.TERRAFORM_PATH }}
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      id: terraform-output
      working-directory: ${{ env.TERRAFORM_PATH }}
      run: |
        echo "=== Terraform Outputs Debug ==="
        terraform output
        echo "================================"
        
        echo "static_web_app_name=$(terraform output -raw static_web_app_name)" >> $GITHUB_OUTPUT
        echo "deployment_token=$(terraform output -raw deployment_token)" >> $GITHUB_OUTPUT
        
        echo "Outputs written to GITHUB_OUTPUT"

  build-and-deploy:
    needs: [setup-backend, terraform-plan-and-apply]
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: 'Build and Deploy Angular App'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ env.ANGULAR_APP_PATH }}/package-lock.json'

    - name: Install dependencies
      working-directory: ${{ env.ANGULAR_APP_PATH }}
      run: npm ci

    - name: Build Angular application
      working-directory: ${{ env.ANGULAR_APP_PATH }}
      run: |
        npm run build -- --configuration production
        echo "Build completed successfully"

    - name: List build output (debug)
      working-directory: ${{ env.ANGULAR_APP_PATH }}
      run: |
        echo "Build output contents:"
        ls -la dist/
        ls -la dist/n8n-deployment-monitoring/ || echo "dist/n8n-deployment-monitoring not found"
        
    - name: Debug deployment token
      run: |
        echo "Terraform deployment token available: ${{ needs.terraform-plan-and-apply.outputs.deployment-token != '' }}"
        echo "Fallback secret available: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN != '' }}"
        
    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ needs.terraform-plan-and-apply.outputs.deployment-token || secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: 'upload'
        app_location: 'src/n8n-deployment-monitoring/dist/n8n-deployment-monitoring/browser'
        api_location: ''
        output_location: ''
        skip_app_build: true
        skip_deploy_on_missing_secrets: true

  close-pull-request:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: 'Close Pull Request'
    
    steps:
    - name: Close Pull Request
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        action: 'close'

  # Optional: Terraform cleanup for development branches
  terraform-destroy:
    if: github.event.action == 'closed' && github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    name: 'Cleanup Infrastructure'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      working-directory: ${{ env.TERRAFORM_PATH }}
      run: |
        terraform init \
          -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP_NAME" \
          -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$TF_BACKEND_CONTAINER_NAME" \
          -backend-config="key=static-web-app/terraform.tfstate" \
          -backend-config="access_key=$TF_BACKEND_ACCESS_KEY"

    - name: Terraform Destroy
      working-directory: ${{ env.TERRAFORM_PATH }}
      run: terraform destroy -auto-approve -var="environment=demo"